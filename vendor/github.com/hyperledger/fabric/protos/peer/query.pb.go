// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/query.proto

package peer // import "github.com/hyperledger/fabric/protos/peer"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ChaincodeQueryResponse returns information about each chaincode that pertains
// to a query in lscc.go, such as GetChaincodes (returns all chaincodes
// instantiated on a channel), and GetInstalledChaincodes (returns all chaincodes
// installed on a peer)
type ChaincodeQueryResponse struct {
	Chaincodes           []*ChaincodeInfo `protobuf:"bytes,1,rep,name=chaincodes,proto3" json:"chaincodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ChaincodeQueryResponse) Reset()         { *m = ChaincodeQueryResponse{} }
func (m *ChaincodeQueryResponse) String() string { return proto.CompactTextString(m) }
func (*ChaincodeQueryResponse) ProtoMessage()    {}
func (*ChaincodeQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_8e7b4612e9d3a25c, []int{0}
}
func (m *ChaincodeQueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChaincodeQueryResponse.Unmarshal(m, b)
}
func (m *ChaincodeQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChaincodeQueryResponse.Marshal(b, m, deterministic)
}
func (dst *ChaincodeQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChaincodeQueryResponse.Merge(dst, src)
}
func (m *ChaincodeQueryResponse) XXX_Size() int {
	return xxx_messageInfo_ChaincodeQueryResponse.Size(m)
}
func (m *ChaincodeQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChaincodeQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChaincodeQueryResponse proto.InternalMessageInfo

func (m *ChaincodeQueryResponse) GetChaincodes() []*ChaincodeInfo {
	if m != nil {
		return m.Chaincodes
	}
	return nil
}

// ChaincodeInfo contains general information about an installed/instantiated
// chaincode
type ChaincodeInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// the path as specified by the install/instantiate transaction
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// the chaincode function upon instantiation and its arguments. This will be
	// blank if the query is returning information about installed chaincodes.
	Input string `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// the name of the ESCC for this chaincode. This will be
	// blank if the query is returning information about installed chaincodes.
	Escc string `protobuf:"bytes,5,opt,name=escc,proto3" json:"escc,omitempty"`
	// the name of the VSCC for this chaincode. This will be
	// blank if the query is returning information about installed chaincodes.
	Vscc string `protobuf:"bytes,6,opt,name=vscc,proto3" json:"vscc,omitempty"`
	// the chaincode unique id.
	// computed as: H(
	//                H(name || version) ||
	//                H(CodePackage)
	//              )
	Id []byte `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// which mspid installed chaincode.
	MspId string `protobuf:"bytes,8,opt,name=mspId,proto3" json:"mspId,omitempty"`
	// installed date .
	CreateDate           string   `protobuf:"bytes,9,opt,name=createDate,proto3" json:"createDate,omitempty"`
	Remark               string   `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChaincodeInfo) Reset()         { *m = ChaincodeInfo{} }
func (m *ChaincodeInfo) String() string { return proto.CompactTextString(m) }
func (*ChaincodeInfo) ProtoMessage()    {}
func (*ChaincodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_8e7b4612e9d3a25c, []int{1}
}
func (m *ChaincodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChaincodeInfo.Unmarshal(m, b)
}
func (m *ChaincodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChaincodeInfo.Marshal(b, m, deterministic)
}
func (dst *ChaincodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChaincodeInfo.Merge(dst, src)
}
func (m *ChaincodeInfo) XXX_Size() int {
	return xxx_messageInfo_ChaincodeInfo.Size(m)
}
func (m *ChaincodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChaincodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChaincodeInfo proto.InternalMessageInfo

func (m *ChaincodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChaincodeInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ChaincodeInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ChaincodeInfo) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *ChaincodeInfo) GetEscc() string {
	if m != nil {
		return m.Escc
	}
	return ""
}

func (m *ChaincodeInfo) GetVscc() string {
	if m != nil {
		return m.Vscc
	}
	return ""
}

func (m *ChaincodeInfo) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ChaincodeInfo) GetMspId() string {
	if m != nil {
		return m.MspId
	}
	return ""
}

func (m *ChaincodeInfo) GetCreateDate() string {
	if m != nil {
		return m.CreateDate
	}
	return ""
}

func (m *ChaincodeInfo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

// ChannelQueryResponse returns information about each channel that pertains
// to a query in lscc.go, such as GetChannels (returns all channels for a
// given peer)
type ChannelQueryResponse struct {
	Channels             []*ChannelInfo `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ChannelQueryResponse) Reset()         { *m = ChannelQueryResponse{} }
func (m *ChannelQueryResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelQueryResponse) ProtoMessage()    {}
func (*ChannelQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_8e7b4612e9d3a25c, []int{2}
}
func (m *ChannelQueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelQueryResponse.Unmarshal(m, b)
}
func (m *ChannelQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelQueryResponse.Marshal(b, m, deterministic)
}
func (dst *ChannelQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelQueryResponse.Merge(dst, src)
}
func (m *ChannelQueryResponse) XXX_Size() int {
	return xxx_messageInfo_ChannelQueryResponse.Size(m)
}
func (m *ChannelQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelQueryResponse proto.InternalMessageInfo

func (m *ChannelQueryResponse) GetChannels() []*ChannelInfo {
	if m != nil {
		return m.Channels
	}
	return nil
}

// ChannelInfo contains general information about channels
type ChannelInfo struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelInfo) Reset()         { *m = ChannelInfo{} }
func (m *ChannelInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelInfo) ProtoMessage()    {}
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_8e7b4612e9d3a25c, []int{3}
}
func (m *ChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelInfo.Unmarshal(m, b)
}
func (m *ChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelInfo.Marshal(b, m, deterministic)
}
func (dst *ChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfo.Merge(dst, src)
}
func (m *ChannelInfo) XXX_Size() int {
	return xxx_messageInfo_ChannelInfo.Size(m)
}
func (m *ChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfo proto.InternalMessageInfo

func (m *ChannelInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func init() {
	proto.RegisterType((*ChaincodeQueryResponse)(nil), "protos.ChaincodeQueryResponse")
	proto.RegisterType((*ChaincodeInfo)(nil), "protos.ChaincodeInfo")
	proto.RegisterType((*ChannelQueryResponse)(nil), "protos.ChannelQueryResponse")
	proto.RegisterType((*ChannelInfo)(nil), "protos.ChannelInfo")
}

func init() { proto.RegisterFile("peer/query.proto", fileDescriptor_query_8e7b4612e9d3a25c) }

var fileDescriptor_query_8e7b4612e9d3a25c = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xcd, 0x6a, 0xe3, 0x30,
	0x14, 0x85, 0x71, 0xfe, 0x73, 0x33, 0x33, 0x0c, 0x9a, 0x4c, 0xd0, 0xa6, 0x25, 0x78, 0x95, 0x42,
	0xb1, 0xa1, 0xa5, 0x2f, 0xd0, 0x14, 0x4a, 0x56, 0xa1, 0x5e, 0x76, 0x53, 0x14, 0xe9, 0x26, 0x16,
	0x8d, 0x25, 0x55, 0x72, 0x02, 0x79, 0xe8, 0xbe, 0x43, 0x91, 0x14, 0x07, 0x67, 0xe5, 0x7b, 0xbf,
	0xf3, 0x49, 0x86, 0x63, 0xc3, 0x5f, 0x83, 0x68, 0xf3, 0xaf, 0x03, 0xda, 0x53, 0x66, 0xac, 0xae,
	0x35, 0x19, 0x84, 0x87, 0x4b, 0xd7, 0x30, 0x5b, 0x96, 0x4c, 0x2a, 0xae, 0x05, 0xbe, 0xf9, 0xbc,
	0x40, 0x67, 0xb4, 0x72, 0x48, 0x9e, 0x00, 0x78, 0x93, 0x38, 0x9a, 0xcc, 0xbb, 0x8b, 0xc9, 0xc3,
	0xff, 0x78, 0xda, 0x65, 0x97, 0x33, 0x2b, 0xb5, 0xd5, 0x45, 0x4b, 0x4c, 0xbf, 0x13, 0xf8, 0x7d,
	0x95, 0x12, 0x02, 0x3d, 0xc5, 0x2a, 0xa4, 0xc9, 0x3c, 0x59, 0x8c, 0x8b, 0x30, 0x13, 0x0a, 0xc3,
	0x23, 0x5a, 0x27, 0xb5, 0xa2, 0x9d, 0x80, 0x9b, 0xd5, 0xdb, 0x86, 0xd5, 0x25, 0xed, 0x46, 0xdb,
	0xcf, 0x64, 0x0a, 0x7d, 0xa9, 0xcc, 0xa1, 0xa6, 0xbd, 0x00, 0xe3, 0xe2, 0x4d, 0x74, 0x9c, 0xd3,
	0x7e, 0x34, 0xfd, 0xec, 0xd9, 0xd1, 0xb3, 0x41, 0x64, 0x7e, 0x26, 0x7f, 0xa0, 0x23, 0x05, 0x1d,
	0xce, 0x93, 0xc5, 0xaf, 0xa2, 0x23, 0x85, 0xbf, 0xad, 0x72, 0x66, 0x25, 0xe8, 0x28, 0xde, 0x16,
	0x16, 0x72, 0x0b, 0xc0, 0x2d, 0xb2, 0x1a, 0x5f, 0x58, 0x8d, 0x74, 0x1c, 0xa2, 0x16, 0x21, 0x33,
	0x18, 0x58, 0xac, 0x98, 0xfd, 0xa4, 0x10, 0xb2, 0xf3, 0x96, 0xbe, 0xc2, 0x74, 0x59, 0x32, 0xa5,
	0x70, 0x7f, 0x5d, 0x5f, 0x0e, 0x23, 0x1e, 0x79, 0x53, 0xde, 0xbf, 0x56, 0x79, 0x9e, 0x87, 0xea,
	0x2e, 0x52, 0x7a, 0x0f, 0x93, 0x56, 0x40, 0x6e, 0x42, 0xfd, 0x7e, 0xfd, 0x90, 0xe2, 0xdc, 0xdd,
	0xf8, 0x4c, 0x56, 0xe2, 0x79, 0x0d, 0xa9, 0xb6, 0xbb, 0xac, 0x3c, 0x19, 0xb4, 0x7b, 0x14, 0x3b,
	0xb4, 0xd9, 0x96, 0x6d, 0xac, 0xe4, 0xcd, 0x4b, 0xfc, 0x17, 0x7f, 0xbf, 0xdb, 0xc9, 0xba, 0x3c,
	0x6c, 0x32, 0xae, 0xab, 0xbc, 0xa5, 0xe6, 0x51, 0xcd, 0xa3, 0x9a, 0x7b, 0x75, 0x13, 0x7f, 0x88,
	0xc7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x3a, 0xcf, 0x85, 0x2b, 0x02, 0x00, 0x00,
}
